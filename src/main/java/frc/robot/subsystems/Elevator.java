// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.RelativeEncoder;
import com.revrobotics.spark.SparkBase;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.config.LimitSwitchConfig;
import com.revrobotics.spark.config.SparkMaxConfig;
import com.revrobotics.spark.SparkLowLevel.MotorType;

import edu.wpi.first.math.controller.ElevatorFeedforward;
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.trajectory.TrapezoidProfile;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

import frc.robot.Constants.ElevatorConstants;;




// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private SparkMax m_LeftMotor;
private SparkMax m_RightMotor;
private LimitSwitchConfig m_levelOneLimitSwitch;
private LimitSwitchConfig m_levelTwoLimitSwitch;

private RelativeEncoder m_leftencoder;
private RelativeEncoder m_rightencoder;

   private SparkMaxConfig m_leftMotorConfig;
   private SparkMaxConfig m_rightMotorConfig;

   private boolean m_enabled;

   private final TrapezoidProfile.Constraints m_constraints =
      new TrapezoidProfile.Constraints(ElevatorConstants.kMaxVelocity, ElevatorConstants.kMaxAcceleration);
  private final ProfiledPIDController m_controller =
      new ProfiledPIDController(ElevatorConstants.kP, ElevatorConstants.kI, ElevatorConstants.kD, m_constraints, ElevatorConstants.kDt);
  private final ElevatorFeedforward m_feedforward = new ElevatorFeedforward(ElevatorConstants.kS, ElevatorConstants.kG, ElevatorConstants.kV);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_enabled=true;

        this.m_LeftMotor = new SparkMax(ElevatorConstants.kCANIdLeftMotor, MotorType.kBrushless);
        this.m_leftMotorConfig = new SparkMaxConfig();
        this.m_leftMotorConfig.inverted(false);
        this.m_leftMotorConfig.limitSwitch.forwardLimitSwitchEnabled(true);
        this.m_leftMotorConfig.limitSwitch.reverseLimitSwitchEnabled(true);
        this.m_LeftMotor.configure(this.m_leftMotorConfig, (SparkBase.ResetMode)null, (SparkBase.PersistMode)null);
        m_leftencoder = m_LeftMotor.getEncoder();

        this.m_RightMotor = new SparkMax(ElevatorConstants.kCANIdRightMotor, MotorType.kBrushless);
        this.m_rightMotorConfig = new SparkMaxConfig();
        this.m_rightMotorConfig.inverted(false);
        this.m_rightMotorConfig.limitSwitch.forwardLimitSwitchEnabled(true);
        this.m_rightMotorConfig.limitSwitch.reverseLimitSwitchEnabled(true);
        this.m_RightMotor.configure(this.m_leftMotorConfig, (SparkBase.ResetMode)null, (SparkBase.PersistMode)null);
        m_rightencoder = m_RightMotor.getEncoder();


        m_rightMotorConfig.encoder
        .positionConversionFactor(1.0 / 360.0 * 2.0 * Math.PI * 1.5)
        .velocityConversionFactor(1000);
    
        m_leftMotorConfig.encoder
        .positionConversionFactor(1.0 / 360.0 * 2.0 * Math.PI * 1.5)
        .velocityConversionFactor(1000);
 


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

     public void setGoal(double position){
        m_controller.setGoal(position);
     }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        m_RightMotor.setVoltage(
        m_controller.calculate(m_rightencoder.getPosition())
            + m_feedforward.calculate(m_controller.getSetpoint().velocity));

            m_LeftMotor.setVoltage(
                m_controller.calculate(m_leftencoder.getPosition())
                    + m_feedforward.calculate(m_controller.getSetpoint().velocity));

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void Enabled() {
        m_enabled = true;
      }
      public void disabled() {
        m_enabled = false;
      }
     
    
      public void goToL1() {             
        setGoal(ElevatorConstants.position_L1); 
      }
    
      public void goToL2() {        
        setGoal(ElevatorConstants.position_L2);
      }

      public void goToL3() {        
        setGoal(ElevatorConstants.position_L3);
      }

      public void goToHome() {        
        setGoal(ElevatorConstants.position_Home);
      }

      public double getPosition() {
        return(m_rightencoder.getPosition());
      }
    
      public void resetEncoder() {
        m_rightencoder.setPosition(0);
    
      }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
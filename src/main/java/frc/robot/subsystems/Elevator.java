// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.spark.SparkBase;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.config.LimitSwitchConfig;
import com.revrobotics.spark.config.SparkMaxConfig;
import com.revrobotics.spark.SparkLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

import frc.robot.Constants.ElevatorSubsystem;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private SparkMax m_LeftMotor;
private SparkMax m_RightMotor;
private LimitSwitchConfig m_levelOneLimitSwitch;
private LimitSwitchConfig m_levelTwoLimitSwitch;


   private SparkMaxConfig motorConfig;
   private boolean isRunning;
   private double speed;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        this.m_LeftMotor = new SparkMax(ElevatorSubsystem.CANidElevatorMotorleft, MotorType.kBrushless);
        this.motorConfig = new SparkMaxConfig();
        this.motorConfig.inverted(false);
        this.motorConfig.limitSwitch.forwardLimitSwitchEnabled(true);
        this.motorConfig.limitSwitch.reverseLimitSwitchEnabled(true);
        this.m_LeftMotor.configure(this.motorConfig, (SparkBase.ResetMode)null, (SparkBase.PersistMode)null);
        

        this.m_RightMotor = new SparkMax(ElevatorSubsystem.CANidElevatorMotorright, MotorType.kBrushless);
        this.motorConfig = new SparkMaxConfig();
        this.motorConfig.inverted(false);
        this.motorConfig.limitSwitch.forwardLimitSwitchEnabled(true);
        this.motorConfig.limitSwitch.reverseLimitSwitchEnabled(true);
        this.m_RightMotor.configure(this.motorConfig, (SparkBase.ResetMode)null, (SparkBase.PersistMode)null);
        

 


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

     

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        
    }

    public void run() {
        this.speed = 0.2;
        this.isRunning = true;
    }

    public void stop() {
        this.speed = 0;
        this.isRunning = false;
    }

    public void runDown() {
        this.speed = -0.2;
        this.isRunning = true;
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

